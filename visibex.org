#+title: visibex

* overview

Provide a visual environment for inspecting and debugging bex.

* restful http api

** =GET /n/{id}:= basic node information

Returns basic information about the
node. Responds with a 404 status code for invalid or non-existent NID.

** =GET /n/{id}/sho=: Returns SVG graph representation of the node
and its downstream nodes, generated by GraphViz.

** =POST /n/{id}/eval=: evaluate the expression with variable assignments
Accepts a JSON dictionary mapping variable
identifiers (vids) to binary values (0 or 1) for evaluation.

** =GET /n/{id}/table=: fetch a table of all sub-nodes

Returns a table of child nodes. For now,
assume the columns and associated types are:

#+begin_src json
{ id: u32, cost: u32, op: u32, args : [ string ] }
#+end_src

The args represent outgoing edges to other nodes.

** =POST /shell=: stateful, interactive shell

Accepts either a text/plain or a JSON object
with a "commands" attribute that consists of an array of command
strings. Processes each command in sequence and returns a JSON
transcript with the output for each command. The output includes the
state of the stack and any other output. This endpoint will be limited
to inputs of 4096 characters but will be configurable.

Example input:

#+begin_src json
  { "commands": [ "x0 x1 and", "x2 xor", "sho" ] }
#+end_src

Example output:

#+begin_src json
[ { "n": 0, "in":"x0 x1 and", "out": [], "stack":["n0"] },
  { "n": 1, "in":"x2 xor", "out": [], "stack":["n1"] },
  { "n": "2", "in": "sho", "out": [{"graph":"/n/1/sho"}, "stack": [ ]}]
#+end_src


** =GET /shell/hist=: Allows fetching the entire history transcript.

* Frontend:

Developed using Vue 3 and the Naive UI component library.

** ui components

*** Bex Shell

**** Input Field

Allows users to input shell commands which are sent to the /shell endpoint when submitted.

**** History Section

Displays the transcript returned by the /shell endpoint. Each command and its output are shown. SVG links in the transcript are rendered as clickable thumbnails.

*** Display Area:

**** SVG Display Section
Displays SVGs when thumbnails in the History section are clicked, and whenever a "sho" command is entered. SVGs are fetched on-the-fly from the API.

**** Node table section

Allows users to browse and query the graph as a table of nodes. The table of child nodes is fetched from the =/n/{id}/table= endpoint. Both the graph and the table will be visible at the same time, with options to hide either.

* Future Requirements:

- Develop a consistent error format for the responses returned from the /shell endpoint. This could include an error code and string.

- Plan for basic authentication and rate limiting to prevent misuse when exposing this service to the public web.

- Plan for handling network errors or other failures when the frontend communicates with the backend.
